<?php
/*
 * emyi
 *
 * @link http://github.com/douggr/emyi for the canonical source repository
 * @license http://opensource.org/licenses/MIT MIT License
 */

namespace EmyiTest\Http;

use Emyi\Http\Message;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0
 */
class MessageTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Base
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Message;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Emyi\Http\Message::setMetadata
     *
     */
    public function testSetMetadata()
    {
        // as scalar
        $ret = $this->object->setMetadata('Foo', 'bar');
        $this->assertInstanceOf('Emyi\Http\Message', $ret);
        $this->assertEquals('bar', $this->object->getMetadata('Foo'));
        $this->assertEquals(['Foo' => 'bar'], $this->object->getMetadata());

        // as array
        $ret = $this->object->setMetadata(['Foo' => 'bar']);
        $this->assertInstanceOf('Emyi\Http\Message', $ret);
        $this->assertEquals('bar', $this->object->getMetadata('Foo'));

        // as invalid
        $this->setExpectedException('InvalidArgumentException');
        $this->object->setMetadata(new \stdClass());
    }

    /**
     * @covers Emyi\Http\Message::getMetadata
     *
     */
    public function testGetMetadata()
    {
        $this->assertEquals('bar', $this->object->getMetadata('Foo', 'bar'));

        // not scalar
        $this->setExpectedException('InvalidArgumentException');
        $this->object->getMetadata(new \stdClass());
    }

    /**
     * @covers Emyi\Http\Message::setContent
     * @covers Emyi\Http\Message::getContent
     */
    public function testSetContent_and_GetContent()
    {
        $ret = $this->object->setContent('I can set content');
        $this->assertInstanceOf('Emyi\Http\Message', $ret);
        $this->assertEquals('I can set content', $this->object->getContent());
    }

    /**
     * @covers Emyi\Http\Message::__toString
     *
     */
    public function test__toString()
    {
        $this->object
            ->setContent('This is my content')
            ->setMetadata([
                'Foo' => 'bar',
                'One' => 'Two'
            ]);

        $expected = "Foo: bar\r\nOne: Two\r\n\r\nThis is my content";
        $this->assertEquals($expected, (string) $this->object);
    }
}
