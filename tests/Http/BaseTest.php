<?php
/*
 * emyi
 *
 * @link http://github.com/douggr/emyi for the canonical source repository
 * @license http://opensource.org/licenses/MIT MIT License
 */

namespace EmyiTest\Http;

use Emyi\Http\Message;
use Emyi\Http\Base;

/**
 * Emyi\Http\Base is abstract
 */
class BaseInstance extends Base
{
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0
 */
class BaseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Base
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new BaseInstance;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Emyi\Http\Base::getVersion
     * @covers Emyi\Http\Base::setVersion
     */
    public function testGetVersion_and_setVersion()
    {
        $ret = $this->object->setVersion('1.0');
        $this->assertInstanceOf('Emyi\Http\Base', $ret);
        $this->assertInstanceOf('Emyi\Http\Base', $ret);
        $this->assertEquals('1.0', $this->object->getVersion());

        // Invalid version
        $this->setExpectedException('InvalidArgumentException');
        $this->object->setVersion('1.2');
    }

    /**
     * @covers Emyi\Http\Base::setHeader
     * @covers Emyi\Http\Base::getHeader
     * @note another header methods were covered in MessageTest
     */
    public function testGetHeader()
    {
        $ret = $this->object->addHeader('Foo', 'bar');
        $this->assertInstanceOf('Emyi\Http\Message', $ret);
        $this->assertEquals('bar', $this->object->getHeader('Foo'));
        $this->assertEquals(null, $this->object->getHeader('bar'));

        // make sure the headers are well-formed when it returns/echoes
        // and values returns AS-IS
        $ret = $this->object->addHeader('THIS_IS A BAD HEADER', 'bar');
        // "This-Is-A-Bad-Header" is well-formed
        $this->assertEquals('bar', $this->object->getHeader('This-Is-A-Bad-Header'));
        $this->assertFalse('Bar' == $this->object->getHeader('This-Is-A-Bad-Header'));
    }
}
